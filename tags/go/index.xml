<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Go on Z.Q.K</title>
    <link>http://www.qiankun.info/tags/go/</link>
    <description>Recent content in Go on Z.Q.K</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>Copyright © Z.Q.K</copyright>
    <lastBuildDate>Mon, 10 Mar 2025 17:10:03 +0800</lastBuildDate><atom:link href="http://www.qiankun.info/tags/go/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Gin 路由组</title>
      <link>http://www.qiankun.info/posts/gin-%E8%B7%AF%E7%94%B1%E7%BB%84/</link>
      <pubDate>Mon, 10 Mar 2025 17:10:03 +0800</pubDate>
      
      <guid>http://www.qiankun.info/posts/gin-%E8%B7%AF%E7%94%B1%E7%BB%84/</guid>
      <description>
        
          
            &lt;p&gt;Gin 框架中的 &lt;strong&gt;RouterGroup（路由组）&lt;/strong&gt; 是组织和管理路由的重要机制，它允许将一组具有相同前缀路径或共用中间件的路由逻辑性地分组，提高代码的可读性和可维护性。&lt;/p&gt;
          
          
        
      </description>
    </item>
    
    <item>
      <title>Go Micro Watcher</title>
      <link>http://www.qiankun.info/posts/go-micro-watcher/</link>
      <pubDate>Mon, 10 Mar 2025 10:43:41 +0800</pubDate>
      
      <guid>http://www.qiankun.info/posts/go-micro-watcher/</guid>
      <description>
        
          
            &lt;p&gt;在 Go-Micro 中，&lt;strong&gt;Watcher&lt;/strong&gt; 是 &lt;code&gt;Registry&lt;/code&gt; 组件的一个核心功能，用于&lt;strong&gt;实时监听服务实例的变化&lt;/strong&gt;（如服务注册、注销、元数据更新等）。它的作用是通过事件驱动机制，让客户端或服务消费者能够动态感知服务实例的上下线状态，从而实现服务发现的实时性和动态路由。&lt;/p&gt;
          
          
        
      </description>
    </item>
    
    <item>
      <title>Go Micro Registry</title>
      <link>http://www.qiankun.info/posts/go-micro-registry/</link>
      <pubDate>Mon, 10 Mar 2025 10:27:39 +0800</pubDate>
      
      <guid>http://www.qiankun.info/posts/go-micro-registry/</guid>
      <description>
        
          
            &lt;p&gt;&lt;strong&gt;Registry&lt;/strong&gt; 是 Go-Micro 中一个关键组件，负责服务的注册与发现（Service Discovery），确保微服务之间能够动态发现和通信。以下是 &lt;code&gt;Registry&lt;/code&gt; 组件的详细介绍：&lt;/p&gt;
          
          
        
      </description>
    </item>
    
    <item>
      <title>Gin 核心组件</title>
      <link>http://www.qiankun.info/posts/gin-%E6%A0%B8%E5%BF%83%E7%BB%84%E4%BB%B6/</link>
      <pubDate>Sun, 09 Mar 2025 20:02:48 +0800</pubDate>
      
      <guid>http://www.qiankun.info/posts/gin-%E6%A0%B8%E5%BF%83%E7%BB%84%E4%BB%B6/</guid>
      <description>
        
          
            &lt;p&gt;Gin 框架是一个高性能的 Go Web 框架，其核心组件设计简洁但功能强大，以下是其主要核心组件及其作用：&lt;/p&gt;
          
          
        
      </description>
    </item>
    
    <item>
      <title>Go反射优缺点</title>
      <link>http://www.qiankun.info/posts/go%E5%8F%8D%E5%B0%84%E4%BC%98%E7%BC%BA%E7%82%B9/</link>
      <pubDate>Fri, 07 Mar 2025 10:26:44 +0800</pubDate>
      
      <guid>http://www.qiankun.info/posts/go%E5%8F%8D%E5%B0%84%E4%BC%98%E7%BC%BA%E7%82%B9/</guid>
      <description>
        
          
            &lt;p&gt;Go语言的反射（&lt;code&gt;reflect&lt;/code&gt; 包）提供了在运行时动态操作类型和值的能力，但它是一把双刃剑，既有强大的灵活性，也存在明显的局限性。以下是其优缺点分析：&lt;/p&gt;
          
          
        
      </description>
    </item>
    
    <item>
      <title>Go反射用法</title>
      <link>http://www.qiankun.info/posts/go%E5%8F%8D%E5%B0%84%E7%94%A8%E6%B3%95/</link>
      <pubDate>Fri, 07 Mar 2025 10:08:26 +0800</pubDate>
      
      <guid>http://www.qiankun.info/posts/go%E5%8F%8D%E5%B0%84%E7%94%A8%E6%B3%95/</guid>
      <description>
        
          
            &lt;p&gt;Go语言的反射（Reflection）机制允许程序在运行时动态地操作变量、结构体、函数等，获取其类型信息或修改其值。反射的核心是 &lt;code&gt;reflect&lt;/code&gt; 包，通过它可以在运行时检查类型、调用方法、修改变量值等。以下是反射的详细用法和示例：&lt;/p&gt;
          
          
        
      </description>
    </item>
    
    <item>
      <title>网络轮询器的职责和工作方式</title>
      <link>http://www.qiankun.info/posts/go%E8%BF%90%E8%A1%8C%E6%97%B6%E4%B8%AD%E7%BD%91%E7%BB%9C%E8%BD%AE%E8%AF%A2%E5%99%A8%E7%9A%84%E8%81%8C%E8%B4%A3%E5%92%8C%E5%B7%A5%E4%BD%9C%E6%96%B9%E5%BC%8F/</link>
      <pubDate>Fri, 07 Mar 2025 07:57:00 +0800</pubDate>
      
      <guid>http://www.qiankun.info/posts/go%E8%BF%90%E8%A1%8C%E6%97%B6%E4%B8%AD%E7%BD%91%E7%BB%9C%E8%BD%AE%E8%AF%A2%E5%99%A8%E7%9A%84%E8%81%8C%E8%B4%A3%E5%92%8C%E5%B7%A5%E4%BD%9C%E6%96%B9%E5%BC%8F/</guid>
      <description>
        
          
            &lt;p&gt;Go运行时中的网络轮询器（Netpoller）是Go语言实现高并发I/O的核心组件，其职责和工作方式可以概括如下：&lt;/p&gt;
          
          
        
      </description>
    </item>
    
    <item>
      <title>Context 跨服务传递</title>
      <link>http://www.qiankun.info/posts/context-%E8%B7%A8%E6%9C%8D%E5%8A%A1%E4%BC%A0%E9%80%92/</link>
      <pubDate>Thu, 06 Mar 2025 11:44:26 +0800</pubDate>
      
      <guid>http://www.qiankun.info/posts/context-%E8%B7%A8%E6%9C%8D%E5%8A%A1%E4%BC%A0%E9%80%92/</guid>
      <description>
        
          
            &lt;p&gt;在 Go 开发的分布式系统中，&lt;code&gt;context.Context&lt;/code&gt; 的跨服务传递是实现链路跟踪、超时控制、元数据共享等分布式功能的核心机制。以下是其工作原理和实现方式的详细说明：&lt;/p&gt;
          
          
        
      </description>
    </item>
    
    <item>
      <title>Go中复制map可能遇到坑</title>
      <link>http://www.qiankun.info/posts/go%E4%B8%AD%E5%A4%8D%E5%88%B6map%E5%8F%AF%E8%83%BD%E9%81%87%E5%88%B0%E5%9D%91/</link>
      <pubDate>Sat, 02 Nov 2019 14:03:25 +0800</pubDate>
      
      <guid>http://www.qiankun.info/posts/go%E4%B8%AD%E5%A4%8D%E5%88%B6map%E5%8F%AF%E8%83%BD%E9%81%87%E5%88%B0%E5%9D%91/</guid>
      <description>
        
          
          
        
      </description>
    </item>
    
    <item>
      <title>Go Module本地依赖的两种玩法</title>
      <link>http://www.qiankun.info/posts/go-module%E6%9C%AC%E5%9C%B0%E4%BE%9D%E8%B5%96%E7%9A%84%E4%B8%A4%E7%A7%8D%E7%8E%A9%E6%B3%95/</link>
      <pubDate>Sun, 23 Jun 2019 11:34:55 +0800</pubDate>
      
      <guid>http://www.qiankun.info/posts/go-module%E6%9C%AC%E5%9C%B0%E4%BE%9D%E8%B5%96%E7%9A%84%E4%B8%A4%E7%A7%8D%E7%8E%A9%E6%B3%95/</guid>
      <description>
        
          
          
        
      </description>
    </item>
    
    <item>
      <title>slice底层struct的数据结构</title>
      <link>http://www.qiankun.info/posts/slice%E5%BA%95%E5%B1%82struct%E7%9A%84%E5%9C%B0%E5%9D%80/</link>
      <pubDate>Thu, 13 Jun 2019 17:51:40 +0800</pubDate>
      
      <guid>http://www.qiankun.info/posts/slice%E5%BA%95%E5%B1%82struct%E7%9A%84%E5%9C%B0%E5%9D%80/</guid>
      <description>
        
          
            通过slice成员的地址观察其底层struct的数据结构
          
          
        
      </description>
    </item>
    
  </channel>
</rss>
