<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>程序设计 on Z.Q.K</title>
    <link>https://www.qiankun.info/tags/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/</link>
    <description>Recent content in 程序设计 on Z.Q.K</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>Copyright © Z.Q.K</copyright>
    <lastBuildDate>Sat, 08 Mar 2025 07:39:25 +0800</lastBuildDate><atom:link href="https://www.qiankun.info/tags/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>内联函数</title>
      <link>https://www.qiankun.info/posts/%E5%86%85%E8%81%94%E5%87%BD%E6%95%B0/</link>
      <pubDate>Sat, 08 Mar 2025 07:39:25 +0800</pubDate>
      
      <guid>https://www.qiankun.info/posts/%E5%86%85%E8%81%94%E5%87%BD%E6%95%B0/</guid>
      <description>
        
          
            &lt;p&gt;内联函数（Inline Function）是编程中用于优化程序性能的一种机制，尤其在C++中常见。以下是关于内联函数的详细说明：&lt;/p&gt;
          
          
        
      </description>
    </item>
    
    <item>
      <title>热路径优化</title>
      <link>https://www.qiankun.info/posts/%E7%83%AD%E8%B7%AF%E5%BE%84%E4%BC%98%E5%8C%96/</link>
      <pubDate>Fri, 07 Mar 2025 20:21:06 +0800</pubDate>
      
      <guid>https://www.qiankun.info/posts/%E7%83%AD%E8%B7%AF%E5%BE%84%E4%BC%98%E5%8C%96/</guid>
      <description>
        
          
            &lt;p&gt;热路径（Hot Path）是代码中执行频率最高、耗时最长的关键路径，通常占用了程序运行时的绝大部分资源。优化热路径可以显著提升程序性能。以下是对热路径的详细解析：&lt;/p&gt;
          
          
        
      </description>
    </item>
    
    <item>
      <title>布隆过滤器的原理</title>
      <link>https://www.qiankun.info/posts/%E5%B8%83%E9%9A%86%E8%BF%87%E6%BB%A4%E5%99%A8%E7%9A%84%E5%8E%9F%E7%90%86/</link>
      <pubDate>Thu, 06 Mar 2025 18:22:40 +0800</pubDate>
      
      <guid>https://www.qiankun.info/posts/%E5%B8%83%E9%9A%86%E8%BF%87%E6%BB%A4%E5%99%A8%E7%9A%84%E5%8E%9F%E7%90%86/</guid>
      <description>
        
          
            &lt;p&gt;布隆过滤器（Bloom Filter）是一种&lt;strong&gt;空间高效的概率型数据结构&lt;/strong&gt;，用于快速判断一个元素是否可能存在于集合中。其核心工作原理基于&lt;strong&gt;哈希函数&lt;/strong&gt;和&lt;strong&gt;位数组&lt;/strong&gt;的配合，通过牺牲一定的准确性（允许假阳性）来换取极低的空间占用和极高的查询速度。以下是其工作原理的详细分解：&lt;/p&gt;
          
          
        
      </description>
    </item>
    
  </channel>
</rss>
